package parser

import (
	"github.com/Masterminds/sprig"
	"io"
	"text/template"
)

const bodyTpl = `package {{.Package}}

// This file is auto-generated by Codl.

import (
	"github.com/Masterminds/cookoo"
	{{range .Registry.Imports}}{{.}}
	{{end}}
)

func {{.Name | title }}Routes(reg *cookoo.Registry) {
	{{range .Registry.Routes}}reg.Route({{.Name}}, {{.Description}}){{range .Commands}}.
		Does({{.Cmd}}, {{.Name}}){{range .Params}}.
			Using({{.Name}}){{if .DefaultVal}}.WithDefault({{.DefaultVal}}){{end}}{{if .From}}.From({{.From | join ", "}}){{end}}{{end}}{{end}}

	{{end}}
}
`

type Registry interface {
	Routes() []*Route
	Imports() []string
}

type serializerContext struct {
	Registry Registry
	Package string
	Name string
}

type Serializer struct {
	out io.Writer
	reg Registry
	tpl *template.Template
	name string
	packageName string
}

// NewSerializer creates a new serializer.
//
// name is used to construct the function callback. "foo" becomes "func FooRoutes(reg *cookoo.Registry)"
// packname is used to construct the package. "foo" becomes "package foo"
func NewSerializer(name, packname string, out io.Writer, reg Registry) *Serializer {
	s := &Serializer{name: name, out: out, reg: reg, packageName: packname}
	s.compile()

	return s
}

func (s *Serializer) Write() error {
	cxt := &serializerContext {
		Name: s.name,
		Registry: s.reg,
		Package: s.packageName,
	}
	return s.tpl.Execute(s.out, cxt)
}

func (s *Serializer) compile() {
	s.tpl = template.Must(template.New("body").Funcs(sprig.TxtFuncMap()).Parse(bodyTpl))
}

